################################################################################
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>                          #
#                                                                              #
# Updated: 03/16/2022 Eliminater74                                             #
#                                                                              #
# This is free software, licensed under the MIT License.                       #
# See /LICENSE for more information.                                           #
#                                                                              #
# https://github.com/P3TERX/Actions-OpenWrt                                    #
# Description: Build OpenWrt using GitHub Actions                              #
#                                                                              #
################################################################################
#  MAIN BUILD CONTROL SECTION:                                                 #
################################################################################

name: OpenWRT AutoBuild (T) (Linksys Devices)
'on':
  repository_dispatch:
  workflow_dispatch:

env:
  HARDWARE_ID: ${{ github.event.client_payload.message.HARDWARE_ID }}
  HARDWARE_DEVICE: ${{ github.event.client_payload.message.HARDWARE_DEVICE }}
  FEEDS_CONF: feeds.conf.default
  CUSTC_SH: custom_configuration.sh
  BEFORE_BUILD: before_build.sh
  AFTER_BUILD: after_build.sh
  KERNEL_VERSION: kernel_version.sh
  GITHUB_RUN: github_push.sh
  EXT_INIT_ENV: environment.sh
  USE_FILES: true
  USE_CUST_THEMES: true
  USE_CUSTOM_CONFIGURATION: true
  USE_OPENWRT_PATCHES: true
  USE_LUCI_PATCHES: false
  USE_PACKAGES_PATCHES: false
  USE_DEVOPENWRT: true
  USE_FETCH_PACKAGES: true
  USE_KERNEL_VERSION: true
  USE_CACHE: true
  ## ----------------------------------------- ##
  EXTERNAL_BUILD_USER_DOMAIN_SETUP: true
  EXTERNAL_PRE-KERNEL_CONFIGURATION: true
  EXTERNAL_CCACHE_SETUP: true
  EXTERNAL_CHANGE_DEFAULT_LUCI_THEME: true
  ## ------------------------------------------##
  ### ---------------------------------------------------------------------- ###
  PERSONAL_PACKAGES: true
  UNSORTED_PACKAGES: true
  LEAN_PACKAGES: true
  SIRPDBOY_PACKAGES: true
  HELMIAU_PACKAGES: true
  TEST_PACKAGES: true

  ### ---------------------------------------------------------------------- ###
  ### ------------------------------------------------------------------ ###
  ## Disabling any of these will still build said section,
  ## Just wont be debugable showing. Enabling them will add,
  ## more time to final completion.
  BUILD_KMODS: true
  BUILD_PACKAGES: true
  INSTALL_PACKAGES: true
  INDEX_PACKAGES: true
  ### ------------------------------------------------------------------ ###
  ## Enable DEBUG will show more INFO
  DEBUG_COMPILE: false
  ## Enable IGNORE is debug with IGNORE_ERRORS=1
  IGNORE_COMPILE: false
  ### ------------------------------------------------------------------ ###
  KMODS: true
  ACL_LUCI: true
### [ LOGS ] ###
  GITLOGA: true
  GITLOGB: true
### -------------------- ###
  RUN_BEFORE_BUILD: true
  RUN_AFTER_BUILD: false
  RUN_GITHUB_PUSH: true
  UPLOAD_BUILD_LOGS: true
  UPLOAD_KMODS: true
  UPLOAD_PACKAGES: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TARGZIP_PACKAGES: true
### -------------------- ###
### [ GITHUB PUSH ENV ] ###
  SOURCE_DIRECTORY_A: "openwrt/bin/packages/arm_cortex-a9_vfpv3-d16"
  SOURCE_DIRECTORY_B: "openwrt/bin/targets/mvebu/cortexa9/kmods/$KMOD_DIR"
  DESTINATION_GITHUB_USERNAME: "DevOpenWRT-Router"
  DESTINATION_REPOSITORY_NAME: "Linksys_OpenWRT_Releases"
  USER_EMAIL: "BuildBot2021@gmail.com"
  USER_NAME: "BuildBot2021"
  DESTINATION_REPOSITORY_USERNAME: "DevOpenWRT-Router"
  TARGET_BRANCH: "main"
  COMMIT_MESSAGE: "Updated: $D"
  TARGET_DIRECTORY_A: "packages"
  TARGET_DIRECTORY_B: "kmods/$KMOD_DIR"
### -------------------- ###
  TZ: America/New_York
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Show system
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h
          uname -a
          [ -f /proc/version ] && cat /proc/version
          [ -f /etc/issue.net ] && cat /etc/issue.net
          [ -f /etc/issue ] && cat /etc/issue
          ulimit -a

      - name: HARDWARE_DEVICE
        run: |
          echo "Device: $HARDWARE_DEVICE"

      - name: "Cleanup Environment"
        uses: rokibhasansagar/slimhub_actions@main

      - name: Initializing environment
        run: |
          echo "::group::Install Build Env Tool"
          sudo -E apt-get clean
          sudo -E apt-get -qq update
          sudo -E apt-get -qq full-upgrade
          sudo -E apt-get -qq install curl libstdc++6 git wget rsync aria2
          mkdir -p ~/.bin
          export PATH="${HOME}/.bin:${PATH}"
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "::endgroup::"
          sudo -E apt-get -qq install $(curl -fsSL bit.ly/depends-ubuntu-2004)
          wget -qO - https://bit.ly/build-env-on-ubuntu-bionic | sed 's/python-/python3-/g' | /bin/bash

      - name: environment extra
        run: |
          sudo -E apt-get clean -qq
          for i in $(ls /usr/bin/*-8); do sudo -E ln -sf $i ${i%%-8*}; done
          sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Set variables
        run: |
          echo "::set-output name=date::$(date +%F)"
        id: var

      - name: Initialization GIT environment
        run: |
          git config --global user.email "BuildBot2021@gmail.com"
          git config --global user.name "BuildBot"
### ------------------------------------------------------------------------------ ###
      - name: Set source and branch
        id: setSource
        run: |
                  echo "::set-output name=sourceString::https://github.com/openwrt/openwrt.git"
                  echo "::set-output name=branchString::master"
### ------------------------------------------------------------------------------ ###
      - name: Clone source code
        working-directory: /workdir
        run: >
          df -hT $PWD

          git clone ${{ steps.setSource.outputs.sourceString }} -b ${{
          steps.setSource.outputs.branchString }} openwrt

          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
### ------------------------------------------------------------------------------ ###
      - name: Before Build
        if: env.RUN_BEFORE_BUILD == 'true' && !cancelled()
        run: |
          chmod +x scripts/$BEFORE_BUILD
          /bin/bash ${GITHUB_WORKSPACE}/scripts/before_build.sh
### ------------------------------------------------------------------------------ ###
      - name: Current Commit Before Feeds/Patches
        if: env.GITLOGA == 'true' && !cancelled()
        run: |
          cd openwrt
          git log --pretty=oneline -n 1
### ------------------------------------------------------------------------------ ###
      - name: Load custom feeds
        run: >
          [ -e configs/$FEEDS_CONF ] && mv configs/$FEEDS_CONF
          openwrt/feeds.conf.default
### ------------------------------------------------------------------------------ ###
      - name: Set LUCI Source
        id: setLuci
        run: |
              cd openwrt
              sed -i 's#/git.openwrt.org/project/luci.git#/git.openwrt.org/project/luci.git#g' feeds.conf.default
              sed -i 's#/github.com/coolsnowwolf/luci#/git.openwrt.org/project/luci.git#g' feeds.conf.default
### ------------------------------------------------------------------------------ ###
      - name: Load LUCI custom Themes
        if: env.USE_CUST_THEMES == 'true' && !cancelled()
        run: |
          chmod +x scripts/luci_themes.sh
          cd openwrt
          $GITHUB_WORKSPACE/scripts/luci_themes.sh
### ------------------------------------------------------------------------------ ###
      - name: Load fetch_packages.sh
        if: env.USE_FETCH_PACKAGES == 'true' && !cancelled()
        run: |
          chmod +x scripts/fetch_packages.sh
          cd openwrt
          $GITHUB_WORKSPACE/scripts/fetch_packages.sh
### ------------------------------------------------------------------------------ ###
      - name: Update feeds Package
        run: |
          file=./scripts/feeds_update.txt
          while read -r line; do
          cd openwrt && ./scripts/feeds update $line
          done < "$file"
### ------------------------------------------------------------------------------ ###
      - name: Install feeds Package
        run: |
          file=./scripts/feeds_install.txt
          while read -r line; do
          cd openwrt && ./scripts/feeds install $line
          done < "$file"
### ------------------------------------------------------------------------------ ###
      - name: Uninstall feeds Package
        run: |
          file=./scripts/feeds_uninstall.txt
          while read -r line; do
          cd openwrt && ./scripts/feeds uninstall $line
          done < "$file"
### ------------------------------------------------------------------------------ ###
      - name: Copy (files) Dir
        if: env.USE_FILES == 'true' && !cancelled()
        run: |
          [ -e configs/files ] && mv configs/files openwrt/files
### ------------------------------------------------------------------------------ ###
      - name: Copy (.config)
        run: >
          [ -e configs/${HARDWARE_DEVICE}.config ] && mv
          configs/${HARDWARE_DEVICE}.config openwrt/.config
### ------------------------------------------------------------------------------ ###
      - name: Run Custom OpenWRT Patches
        if: env.USE_OPENWRT_PATCHES == 'true' && !cancelled()
        run: |
          mv configs/patches openwrt/patches
          cd openwrt
          git am patches/*.patch
          rm -rf patches
### ------------------------------------------------------------------------------ ###
      - name: Run Custom LUCI Patches
        if: env.USE_LUCI_PATCHES == 'true' && !cancelled()
        run: |
          mv configs/patches/luci openwrt/feeds/luci/patches
          cd openwrt/feeds/luci
          git am patches/*.patch
          rm -rf patches
### ------------------------------------------------------------------------------ ###
      - name: Run Custom Packages Patches
        if: env.USE_PACKAGES_PATCHES == 'true' && !cancelled()
        run: |
          mv configs/patches/packages openwrt/feeds/packages/patches
          cd openwrt/feeds/packages
          git am patches/*.patch
          rm -rf patches
### ------------------------------------------------------------------------------ ###
      - name: Current Commit After Feeds/Patches
        if: env.GITLOGB == 'true' && !cancelled()
        run: |
          cd openwrt
          git log --pretty=oneline -n 1
### ------------------------------------------------------------------------------ ###
      - name: Smart chmod
        run: >
          MY_Filter=$(mktemp)

          echo '/\.git' >  ${MY_Filter}

          echo '/\.svn' >> ${MY_Filter}

          find ./ -maxdepth 1 | grep -v '\./$' | grep -v '/\.git' | xargs -s1024
          chmod -R u=rwX,og=rX

          find ./ -type f | grep -v -f ${MY_Filter} | xargs -s1024 file | grep
          'executable\|ELF' | cut -d ':' -f1 | xargs -s1024 chmod 755

          rm -f ${MY_Filter}

          unset MY_Filter
### ------------------------------------------------------------------------------ ###
      - name: Load custom configuration
        if: env.USE_CUSTOM_CONFIGURATION == 'true' && !cancelled()
        run: |
          chmod +x scripts/$CUSTC_SH
          cd openwrt
          $GITHUB_WORKSPACE/scripts/$CUSTC_SH
### ------------------------------------------------------------------------------ ###
      - name: Add ACL
        if: env.ACL_LUCI == 'true' && !cancelled()
        run: |
          chmod +x scripts/create_acl_for_luci.sh
          cd openwrt
          $GITHUB_WORKSPACE/scripts/create_acl_for_luci.sh -a
### ------------------------------------------------------------------------------ ###
      - name: Populating .config
        id: config
        run: |
          cd openwrt
          make defconfig
### ------------------------------------------------------------------------------ ###
      - name: Setup For Compiling
        id: setup
        run: |
          echo -e "$(nproc) Threads to compile with."
          echo -e "Creating (logs) Directory:"
          cd openwrt
          mkdir -p logs
### ------------------------------------------------------------------------------ ###
      - name: Restore cache
        uses: actions/cache@v2
        if: env.USE_CACHE == 'true' && !cancelled()
        with:
          path: openwrt/.ccache
          key: ${{runner.os}}-${{env.HARDWARE_DEVICE}}
          restore-keys: |
            ${{runner.os}}-${{env.HARDWARE_DEVICE}}
      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
        if: env.USE_CACHE == 'true' && !cancelled()
        with:
          max-size: 5G
          extra-config: |
            keep_comments_cpp = true

### ------------------------------------------------------------------------------ ###
      - name: Make Download
        id: makedownload
        run: |
          cd openwrt
          make download -j50
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
### ------------------------------------------------------------------------------ ###
      - name: Building and installing GNU tar
        id: GNUTAR
        run: |
          df -h
          cd openwrt
          let make_process=$(nproc)+2
          make tools/tar/compile -j${make_process} V=s
### ------------------------------------------------------------------------------ ###
      - name: Building and installing tools
        id: maketools
        run: |
          df -h
          cd openwrt
          let make_process=$(nproc)+2
          make tools/install -j${make_process} V=s
### ------------------------------------------------------------------------------ ###
      - name: Building and installing toolchain
        id: maketoolchain
        run: |
          df -h
          cd openwrt
          let make_process=$(nproc)+2
          make toolchain/install -j${make_process} V=s
### ------------------------------------------------------------------------------ ###
      - name: Building kmods
        id: makekmods
        if: env.BUILD_KMODS == 'true' && !cancelled()
        run: |
          df -h
          cd openwrt
          let make_process=$(nproc)+2
          make target/compile -j${make_process} V=s
### ------------------------------------------------------------------------------ ###
      - name: Kernel Version (Part 1)
        id: kernelversionA
        if: env.USE_KERNEL_VERSION == 'true' && !cancelled()
        run: |
          cd openwrt
          find build_dir/ -name .vermagic -exec cat {} \; >VERMAGIC  # Find hash
          find build_dir/ -name "linux-5.*.*" -type d >KERNELVERSION # find kernel version
          kv=$(tail -n +2 KERNELVERSION | sed 's/.*x-//')
          vm=$(head -n 1 VERMAGIC)                                # read kernel hash from file                                     # Get last 7 chars from kernel version
          rm -rf VERMAGIC KERNELVERSION                              # remove both files, Not needed anymore
          cd bin/targets/*/* || exit
          echo "TARGET_DIR=$PWD" >>$GITHUB_ENV
          TARGET_DIR=$PWD
          KERNEL_VER=$kv"-"$vm                      # add together to complete
          KMOD_DIR=$kv"-"$vm                        # add together to complete
          echo "KERNEL_VER=$kv"-"$vm" >>$GITHUB_ENV # store in get actions
          echo "KMOD_DIR=$kv"-"$vm" >>$GITHUB_ENV   # store in get actions
          echo 'src/gz purefusion_packages https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/packages/packages' >> /etc/opkg/distfeeds.con
          https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/kmods/$KMOD_DIR' >> package/system/opkg/files/customfeeds.conf
### ------------------------------------------------------------------------------ ###
      - name: Building packages
        id: makepackages
        if: env.BUILD_PACKAGES == 'true' && !cancelled()
        run: >
          df -h

          cd openwrt

          let make_process=$(nproc)+2

          make package/compile -j${make_process} || make package/compile
          -j${make_process} V=s 2>&1 | tee logs/build.log | grep -i -E
          "^make.*(error|[12345]...Entering directory)"
### ------------------------------------------------------------------------------ ###
      - name: Installing packages
        id: installpackages
        if: env.INSTALL_PACKAGES == 'true' && !cancelled()
        run: >
          df -h

          cd openwrt

          let make_process=$(nproc)+2

          make package/install -j${make_process} || make package/install
          -j${make_process} V=s 2>&1 | tee logs/build.log | grep -i -E
          "^make.*(error|[12345]...Entering directory)"
### ------------------------------------------------------------------------------ ###
      - name: Kernel Version (Part 2)
        id: kernelversionB
        if: env.USE_KERNEL_VERSION == 'true' && !cancelled()
        run: |
          cd ${GITHUB_WORKSPACE}/openwrt
          mkdir -p bin/targets/mvebu/cortexa9/kmods/$KMOD_DIR
          rsync '--include=/kmod-*.ipk' '--exclude=*' -va bin/targets/mvebu/cortexa9/packages/ bin/targets/mvebu/cortexa9/kmods/$KMOD_DIR/
          make -j32 package/index V=s CONFIG_SIGNED_PACKAGES= PACKAGE_SUBDIRS=bin/targets/mvebu/cortexa9/kmods/$KMOD_DIR/
          cd bin/targets/mvebu/cortexa9/kmods/$KMOD_DIR || exit
          tar -cvzf kmods_$KMOD_DIR.tar.gz ./*
          mv kmods_$KMOD_DIR.tar.gz ${GITHUB_WORKSPACE}/openwrt/bin/targets/mvebu/cortexa9/
          cd ${GITHUB_WORKSPACE}/openwrt
#         rm -rf bin/targets/mvebu/cortexa9/kmods
#         cd ${GITHUB_WORKSPACE}/openwrt
### ------------------------------------------------------------------------------ ###
      - name: Indexing packages
        id: indexingpackages
        if: env.INDEX_PACKAGES == 'true' && !cancelled()
        run: >
          df -h

          cd openwrt

          let make_process=$(nproc)+2

          make package/index -j${make_process} CONFIG_SIGNED_PACKAGES= || make
          package/index -j${make_process} CONFIG_SIGNED_PACKAGES= V=s 2>&1 | tee
          logs/build.log | grep -i -E "^make.*(error|[12345]...Entering
          directory)"
### ------------------------------------------------------------------------------ ###
      - name: Compile the firmware (Debug)
        id: compiledebug
        if: env.DEBUG_COMPILE == 'true' && env.IGNORE_COMPILE == 'false'
        run: >
          cd openwrt

          echo -e "$(nproc) thread compile"

          make -j$(nproc) V=s 2>&1 | tee logs/build.log | grep -i -E
          "^make.*(error|[12345]...Entering directory)"

          echo "::set-output name=status::success"

          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r
          's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME

          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >>
          $GITHUB_ENV

          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      - name: Compile the firmware (ignore Errors)
        id: compileignore
        if: env.IGNORE_COMPILE == 'true' && env.DEBUG_COMPILE == 'false'
        run: >
          cd openwrt

          echo -e "$(nproc) thread compile"

          IGNORE_ERRORS=1 make -j$(nproc) -i V=s 2>&1 | tee logs/build.log |
          grep -i -E "^make.*(error|[12345]...Entering directory)"

          echo "::set-output name=status::success"

          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r
          's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME

          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >>
          $GITHUB_ENV

          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
### ------------------------------------------------------------------------------ ###
      - name: Compile the firmware
        id: compile
        continue-on-error: true
        if: env.DEBUG_COMPILE == 'false' && env.IGNORE_COMPILE == 'false'
        run: >
          cd openwrt

          echo -e "$(nproc) thread compile"

          let Make_Process=$(nproc)+2

          make -j${Make_Process} || make -j${Make_Process} V=s

          echo $?

          echo "::set-output name=status::success"

          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r
          's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME

          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >>
          $GITHUB_ENV

          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
### ----- ERROR CONTROL ----- ###
      - name: If Error
        uses: actions/upload-artifact@main
        if: steps.compile.outcome == 'failure' && env.UPLOAD_BUILD_LOGS == 'true'
        with:
          name: 'OpenWrt_logs${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}'
          path: openwrt/logs/
### ------------------------------------------------------------------------------ ###
      - name: After Build
        if: env.RUN_AFTER_BUILD == 'true' && !cancelled()
        run: |
          chmod +x scripts/$AFTER_BUILD
          /bin/bash ${GITHUB_WORKSPACE}/scripts/after_build.sh
### ------------------------------------------------------------------------------ ###
      - name: Check space usage
        if: (!cancelled())
        run: |
          cd openwrt
          echo "=============================================="
          echo "Space usage:"
          echo "=============================================="
          df -hT
          echo "=============================================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          du -h --max-depth=10 ./bin
          echo "=============================================="
### ------------------------------------------------------------------------------ ###
      - name: Prepare Packages/Kmods for Distribution
        id: distribution
        continue-on-error: true
        if: env.RUN_GITHUB_PUSH == 'true' && (!cancelled())
        env:
          API_TOKEN_GITHUB: '${{ secrets.API_TOKEN_GITHUB }}'
        run: |
          chmod +x scripts/$GITHUB_PUSH
          /bin/bash ${GITHUB_WORKSPACE}/scripts/github_push.sh
### ----- ERROR CONTROL ----- ###
      - name: If Error
        if: steps.distribution.outcome == 'failure'
        run: |
              echo "[+] Prepare Packages/Kmods for Distribution Failed"
### ------------------------------------------------------------------------------ ###
      - name: Upload kmods
        uses: actions/upload-artifact@main
        if: >-
          steps.compile.outputs.status == 'success' && env.UPLOAD_KMODS ==
          'true'
        with:
          name: 'OpenWrt_kmods${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}'
          path: 'openwrt/bin/targets/mvebu/cortexa9/kmods/${{ env.KMOD_DIR }}'
### ------------------------------------------------------------------------------ ###
      - name: Upload Packages
        uses: actions/upload-artifact@main
        if: >-
          steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES ==
          'true'
        with:
          name: 'OpenWrt_bin_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}'
          path: openwrt/bin/packages/
      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: >-
          steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR ==
          'true'
        with:
          name: 'OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}'
          path: openwrt/bin
### ------------------------------------------------------------------------------ ###
      - name: Upload logs directory
        uses: actions/upload-artifact@main
        if: env.UPLOAD_BUILD_LOGS == 'true'
        with:
          name: 'OpenWrt_logs${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}'
          path: openwrt/logs/
      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
### ------------------------------------------------------------------------------ ###
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: 'OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}'
          path: '${{ env.FIRMWARE }}'
      - name: tar.gz bin/packages
        if: env.TARGZIP_PACKAGES == 'true' && !cancelled()
        run: >
          cd openwrt/bin/packages

          tar -cvzf OpenWrt_bin_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE
          }}.tar.gz ./*

          mv OpenWrt_bin_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE
          }}.tar.gz ${GITHUB_WORKSPACE}/openwrt/bin/targets/mvebu/cortexa9/
### ------------------------------------------------------------------------------ ###
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: "echo \"::set-output name=release_tag::$HARDWARE_DEVICE-$(date +\"%Y.%m.%d-%H%M\")\"\ntouch release.txt\necho \"::set-output name=status::success\"\n"
      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ steps.tag.outputs.release_tag }}'
          body_path: release.txt
          files: '${{ env.FIRMWARE }}/*'
### ------------------------------------------------------------------------------ ###
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 10
          delete_tags: true
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
