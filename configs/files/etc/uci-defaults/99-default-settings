#!/bin/sh
###################################################################
# default-settings (C) 2021 - 2022 By Eliminater74                #
#                                                                 #
# Updated On: 07/28/2022                                          #
###################################################################

# SQM: Set to "cake" or "pie"
SQM="pie"

# BANIP: turn on "true" or off "false"
BANIP="false" # (BROKEN)

### ----------------------------------------------------------------------------------------------------- ###
###      WARNING: WARNING: DO NOT EDIT BELOW THIS UNLESS YOU KNOW WHAT YOUR DOING!! WARNING: WARNING:     ###
### ----------------------------------------------------------------------------------------------------- ###

FIRSTBOOT=/root/FIRST_BOOT

# set version to "0" after an upgrade or first boot
FILE=/root/KMODS_ADDED
if [ ! -f "$FILE" ]; then
	uci set base_config.@status[0].version='0'
	uci commit base_config
fi

# We need version num either 1 or 0 to determin firstboot upgrade
version=$(uci -q get base_config.@status[0].version)

### Cleanup some Crontabs
rm -rf /etc/crontabs/root

# Prompt colors
sed -i 's/^export PS1.*/export PS1='\''\\\[\\033\[01;31m\\\]\\h\\\[\\033\[01;30m\\\]@\\\[\\033\[01;32m\\\]\\w\\\[\\033\[01;34m\\\] #\\\[\\033\[00m\\\] '\''/' /etc/profile



# Screen settings
cat >> /etc/screenrc << EOF
defscrollback 1000
termcapinfo xterm ti@:te@
hardstatus alwayslastline '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %d/%m %{W}%c %{g}]'
vbell off
EOF

uci set luci.main.lang=auto
uci commit luci

uci set luci.main.mediaurlbase=/luci-static/bootstrap-dark
uci commit luci

uci set fstab.@global[0].anon_mount=1
uci commit fstab

uci -q set upnpd.config.enabled='1'
uci commit upnpd



### ---------------------------------------------------------------- ###



# log level
# 8 debug, 5 warning
uci set system.@system[0].conloglevel='5'
# 5 debug, 9 warning
uci set system.@system[0].cronloglevel='9'
uci commit system

# zram
uci set system.@system[0].zram_size_mb='1536'
uci set system.@system[0].zram_comp_algo='lz4'
uci commit system

if [ "$(uci -q get dhcp.@dnsmasq[0].port)" != "53" ]; then
	uci -q set dhcp.@dnsmasq[0].port='53'
	uci commit dhcp
fi

echo "$(uci -q get uhttpd.main.index_page)" | grep -q "cgi-bin/luci" ||
	uci -q add_list uhttpd.main.index_page='cgi-bin/luci' && uci commit uhttpd

/etc/init.d/wizard disable

sed -i "s/git-.*-\(.*\)/git-\1/g" /usr/lib/lua/luci/version.lua

[ "$(echo "$(/sbin/cpuinfo 2>/dev/null)" | grep -i "MHz")" ] || sed -i "s/_('CPU Info'),cpuinfo.cpufreq,//" /www/luci-static/resources/view/status/include/10_system.js


rm -f /usr/lib/lua/luci/view/admin_status/index/ddns.htm
rm -f /usr/lib/lua/luci/view/admin_status/index/minidlna.htm
rm -f /usr/lib/lua/luci/view/admin_status/index/mwan.htm
rm -f /usr/lib/lua/luci/view/admin_status/index/upnp.htm

echo 'src/gz purefusion_packages https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/packages/packages' >> /etc/opkg/distfeeds.conf
echo 'src/gz purefusion_base https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/packages/base' >> /etc/opkg/distfeeds.conf
echo 'src/gz purefusion_luci https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/packages/luci' >> /etc/opkg/distfeeds.conf
echo 'src/gz purefusion_routing https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/packages/routing' >> /etc/opkg/distfeeds.conf
echo 'src/gz purefusion_telephony https://raw.githubusercontent.com/DevOpenWRT-Router/Linksys_OpenWRT_Releases/main/packages/telephony' >> /etc/opkg/distfeeds.conf

ln -sf /sbin/ip /usr/bin/ip

### -------------------------------------------- S Q M ------------------------------------------------------- ###

# Name of current WAN network
WAN_IFACE=$(uci get network.wan.device)

if [ $SQM = "pie" ]; then
	uci -q batch <<-EOF
	set sqm.eth1.debug_logging='0'
	set sqm.eth1.verbosity='5'
	set sqm.eth1.interface="$WAN_IFACE"
	set sqm.eth1.qdisc_advanced='1'
	set sqm.eth1.squash_ingress='0'
	set sqm.eth1.squash_dscp='0'
	set sqm.eth1.ingress_ecn='ECN'
	set sqm.eth1.linklayer='ethernet'
	set sqm.eth1.overhead='18'
	set sqm.eth1.enabled='1'
	set sqm.eth1.qdisc='pie'
	set sqm.eth1.linklayer_advanced='1'
	set sqm.eth1.tcMTU='1518'
	set sqm.eth1.tcTSIZE='95'
	set sqm.eth1.linklayer_adaptation_mechanism='cake'
	set sqm.eth1.tcMPU='64'
	set sqm.eth1.script='layer_cake.qos'
	set sqm.eth1.egress_ecn='NOECN'
	# set sqm.eth1.download='500000'					# Set by autoSQM
	# set sqm.eth1.upload='20000'						# Set by autoSQM
	set sqm.eth1.qdisc_really_really_advanced='1'
	set sqm.eth1.itarget='15ms'
	set sqm.eth1.etarget='15
	EOF
	uci commit sqm
fi


if [ $SQM = "cake" ]; then
	uci -q batch <<-EOF
	set sqm.eth1.interface="$WAN_IFACE"
	set sqm.eth1.debug_logging='0'
	set sqm.eth1.verbosity='5'
	set sqm.eth1.qdisc='cake'
	set sqm.eth1.qdisc_advanced='1'
	set sqm.eth1.squash_ingress='0'
	set sqm.eth1.squash_dscp='0'
	set sqm.eth1.ingress_ecn='ECN'
	set sqm.eth1.linklayer='ethernet'
	set sqm.eth1.linklayer_advanced='1'
	set sqm.eth1.tcMPU='64'
	set sqm.eth1.egress_ecn='NOECN'
	set sqm.eth1.qdisc_really_really_advanced='1'
	set sqm.eth1.eqdisc_opts='nat dual-srchost'
	set sqm.eth1.linklayer_adaptation_mechanism='cake'
	set sqm.eth1.ilimit='64'
	set sqm.eth1.elimit='64'
	set sqm.eth1.iqdisc_opts='nat dual-dsthost ingress'
	set sqm.eth1.overhead='18'
	set sqm.eth1.tcMTU='1518'
	set sqm.eth1.tcTSIZE='95'
	set sqm.eth1.enabled='1'
	# set sqm.eth1.download=''							# Set by autoSQM
	# set sqm.eth1.upload=''							# Set by autoSQM
	set sqm.eth1.script='piece_of_cake.qos'
	EOF
	uci commit sqm
fi

# Restart SQM
/etc/init.d/sqm reload

## At minute 0 past hour 6, 14, and 22.
echo "0 6,14,22 * * * /usr/lib/OpenWrtScripts/autoSQM.sh" >> /etc/crontabs/root
crontab /etc/crontabs/root

## Run @hourly
echo "@hourly /usr/lib/OpenWrtScripts/autoSQM.sh" >> /etc/crontabs/root
crontab /etc/crontabs/root

### ---------------------------------------------------------------------------------------------------------- ###
##### SPECIAL MODIFICATIONS #####
##### --------------------- #####

### Change /etc/profile to allow running scripts as bash
sed 's/./bash/' /etc/profile
### ---------------------------------------------------------------------------------------------------------- ###

## Lets keep Wireless Enabled (after downloading the firmware, the wireless is turned off by default)
## ref: https://forum.openwrt.org/t/solved-enable-wi-fi-and-connect-to-a-network-on-first-boot/47399/24
sed -i '/option disabled/d' /etc/config/wireless
# wifi off: set wireless.radio${devidx}.disabled=1
# wifi on: set wireless.radio${devidx}.disabled=0
sed -i '/set wireless.radio${devidx}.disabled/d' /lib/wifi/mac80211.sh
wifi up

### ------------------------------------------------------------------------------------------ ###
# kB
memtotal=$(grep MemTotal /proc/meminfo | awk '{print $2}')
if test "$memtotal" -ge 1048576; then
	# > 1024M
	cachesize=10000
	dnsforwardmax=10000
	nf_conntrack_max=262144
elif test "$memtotal" -ge 524288; then
	# <= 1024M
	cachesize=10000
	dnsforwardmax=10000
	nf_conntrack_max=131072
elif test "$memtotal" -ge 262144; then
	# <= 512M
	cachesize=8192
	dnsforwardmax=8192
	nf_conntrack_max=65536
elif test "$memtotal" -ge 131072; then
	# <= 256M
	cachesize=4096
	dnsforwardmax=4096
	nf_conntrack_max=65536
elif test "$memtotal" -ge 65536; then
	# <= 128M
	cachesize=2048
	dnsforwardmax=2048
	nf_conntrack_max=32768
else
	# < 64M
	cachesize=1024
	dnsforwardmax=1024
	nf_conntrack_max=16384
fi

if [ ! -f "$FIRSTBOOT" ]; then
	# dnsmasq
	uci -q batch <<-EOF
	get dhcp.@dnsmasq[0] || add dhcp dnsmasq
	set dhcp.@dnsmasq[0].cachesize="$cachesize"
	set dhcp.@dnsmasq[0].dnsforwardmax="$dnsforwardmax"
	set dhcp.@dnsmasq[0].localservice='0'
	set dhcp.@dnsmasq[0].localise_queries='1'
	set dhcp.@dnsmasq[0].rebind_protection='0'
	set dhcp.@dnsmasq[0].rebind_localhost='1'
	EOF
	uci commit dhcp
	sed -i '/log-facility/d' /etc/dnsmasq.conf
	echo "log-facility=/dev/null" >> /etc/dnsmasq.conf

	# unbound
	uci -q batch <<-EOF
	set unbound.ub_main.rebind_localhost='1'
	set unbound.ub_main.rebind_protection='1'
	set unbound.ub_main.listen_port='1053'
	set unbound.ub_main.dhcp_link='dnsmasq'
	EOF
	uci commit unbound

	# network
	uci -q batch <<-EOF
	set network.@globals[0].ula_prefix=''
	set network.lan.delegate='0'
	set network.wan.mtu=1460
	set network.wan.metric='41'
	set network.wan.delegate='0'
	set network.wan.ipv6='auto'
	EOF
	uci commit network

	# system
	uci -q batch <<-EOF
	set system.@system[0].zram_comp_algo='zstd'
	set system.@system[0].zram_size_mb="$(expr "$memtotal" / 1024 / 3)"
	set system.@system[0].timezone='UTC'
	set system.@system[0].zonename='America/New York'
	delete system.ntp.server
	add_list system.ntp.server='0.us.pool.ntp.org'
	add_list system.ntp.server='1.us.pool.ntp.org'
	add_list system.ntp.server='2.us.pool.ntp.org'
	add_list system.ntp.server='3.us.pool.ntp.org'
	EOF
	uci commit system
	version=1

	# Set version back to 1
	uci set base_config.@status[0].version='1'
	uci commit base_config
	# touch $FIRSTBOOT # <-- Ran from rc.d/S99FirstBoot script
fi
### ------------------------------------------------------------------------------------------ ###

# sysctl overwrite
SYSCTL_LOCAL=/etc/sysctl.d/50-local.conf
mkdir -p /etc/sysctl.d
printf >"$SYSCTL_LOCAL"
echo net.nf_conntrack_max="$nf_conntrack_max" >>"$SYSCTL_LOCAL"
echo net.ipv4.ip_early_demux=0 >>"$SYSCTL_LOCAL"
echo net.bridge.bridge-nf-call-iptables=0 >>"$SYSCTL_LOCAL"
echo net.ipv4.fib_multipath_hash_policy=1 >>"$SYSCTL_LOCAL"
echo net.ipv4.tcp_congestion_control=cubic >>"$SYSCTL_LOCAL"
echo net.netfilter.nf_conntrack_helper=1 >>"$SYSCTL_LOCAL"
echo kernel.msgmax = 65536 >>"$SYSCTL_LOCAL"
echo kernel.msgmnb = 65536 >>"$SYSCTL_LOCAL"
echo vm.swappiness=0 >>"$SYSCTL_LOCAL"

# hsts=1/on/yes: same as --hsts
# hsts=0/off/no: same as --no-hsts
# --no-hsts
### Wget supports HSTS (HTTP Strict Transport Security, RFC 6797) by default. Use ‘--no-hsts’ to make Wget 
### act as a non-HSTS-compliant UA. As a consequence, Wget would ignore all the Strict-Transport-Security 
### headers, and would not enforce any existing HSTS policy.
echo 'hsts=0' > /root/.wgetrc

# Flag packages
opkg flag hold luci-app-firewall
opkg flag hold firewall
opkg flag hold dnsmasq-full

# packet_steering
# use every cpu to handle packet traffic
uci set network.globals.packet_steering='1'
uci commit network
/etc/init.d/network restart

cp -pR /www/cgi-bin/* /www/


uci -q set base_config.@status[0].version="$version"
uci commit base_config

# disable coremark
sed -i '/coremark/d' /etc/crontabs/root
crontab /etc/crontabs/root

# disable linkease
uci set linkease.@linkease[0].enabled='0'
uci commit linkease
/etc/init.d/linkease restart

# link
ln -sf /bin/busybox /bin/top

# luci cache
rm -rf /tmp/luci-modulecache
rm -f /tmp/luci-indexcache*
rm -rf /tmp/luci-*

##############################################################################
# >>>>>>>>>>>>>>>>>>>>>>>  H  A  R  D  E  N  I  N  G <<<<<<<<<<<<<<<<<<<<<<< #
##############################################################################

### Restrict SSH access to the local network (LAN)

uci set dropbear.@dropbear[0].Interface='lan'
uci commit dropbear
service dropbear restart 
### -- END --

### Ensure that we use/redirect to HTTPS always

uci set uhttpd.main.redirect_https='1'
uci commit uhttpd
service uhttpd restart
service uhttpd enable
### -- END --

### BCP38: http://www.bcp38.info/index.php/Main_Page

## This is less about protecting your router and more about preventing your network's 
## contribution to some types of DoS/DDoS attack
uci set bcp38.@bcp38[0].enabled='0'
uci set bcp38.@bcp38[0].interface=$WAN_IFACE #Adjust to match your WAN port - may be something like eth0.2 for example.
uci commit bcp38 

service bcp38 restart
service bcp38 enable

### -- END --


### ---------------------------------------------------------------------------------------- ###
###  BANIP: https://github.com/openwrt/packages/blob/master/net/banip/files/README.md        ###
### ---------------------------------------------------------------------------------------- ###
if [ $BANIP = "false" ]; then
	uci -q batch <<-EOF
	set banip.global.ban_enabled='0'
	set banip.global.ban_trigger='wan'
	set banip.global.ban_autodetect='1'
	set banip.global.ban_logsrc_enabled='1'
	set banip.global.ban_maxqueue='4'
	set banip.global.ban_fetchutil='wget'
	set banip.global.ban_fetchinsecure='1'
	set banip.global.ban_global_settype='src+dst'
	set banip.global.ban_target_src='DROP'
	set banip.global.ban_target_dst='REJECT'
	delete banip.global.ban_settype_src
	add_list banip.global.ban_settype_src='country'
	add_list banip.global.ban_settype_src='dshield'
	set banip.global.ban_loglimit='100'
	set banip.global.ban_logopts_src='-m limit --limit 2/sec'
	set banip.global.ban_localsources='blacklist'
	set banip.global.ban_autoblacklist='1'
	set banip.global.ban_autowhitelist='1'
	delete banip.global.ban_sources
	add_list banip.global.ban_sources='darklist'
	add_list banip.global.ban_sources='debl'
	add_list banip.global.ban_sources='drop'
	add_list banip.global.ban_sources='feodo'
	add_list banip.global.ban_sources='firehol1'
	add_list banip.global.ban_sources='greensnow'
	add_list banip.global.ban_sources='iblockads'
	add_list banip.global.ban_sources='iblockspy'
	add_list banip.global.ban_sources='myip'
	add_list banip.global.ban_sources='nixspam'
	add_list banip.global.ban_sources='proxy'
	add_list banip.global.ban_sources='sslbl'
	add_list banip.global.ban_sources='talos'
	add_list banip.global.ban_sources='threat'
	add_list banip.global.ban_sources='tor'
	add_list banip.global.ban_sources='uceprotect1'
	add_list banip.global.ban_sources='yoyo'
	delete banip.global.ban_countries
	add_list banip.global.ban_countries='ru'
	add_list banip.global.ban_countries='cn'
	add_list banip.global.ban_countries='af'
	add_list banip.global.ban_countries='iq'
	add_list banip.global.ban_countries='ua'
	add_list banip.global.ban_countries='ao'
	add_list banip.global.ban_countries='ai'
	add_list banip.global.ban_countries='ar'
	add_list banip.global.ban_countries='az'
	add_list banip.global.ban_countries='bd'
	add_list banip.global.ban_countries='by'
	add_list banip.global.ban_countries='br'
	EOF
	uci commit banip

	# Allowlist a few sites that I've seen some blocklists break before.
	echo "enro.com" >> /etc/banip/banip.whitelist
	echo "www.reddit.com" >> /etc/banip/banip.whitelist
	echo "yelp.com" >> /etc/banip/banip.whitelist

	service banip restart
	service banip enable

	# refreshing the blocklists every 24 hours
	echo "15 07 * * * /etc/init.d/banip reload" >> /etc/crontabs/root
	crontab /etc/crontabs/root
fi
### -- END --

### adblock
uci -q batch <<-EOF
set adblock.global.adb_enabled='0'
set adblock.global.adb_trigger='wan'
set adblock.global.adb_debug='0'
set adblock.global.adb_dnsfilereset='0'
set adblock.global.adb_mail='0'
set adblock.global.adb_report='0'
set adblock.global.adb_backup='1'
set adblock.global.adb_maxqueue='4'
set adblock.global.adb_dns='dnsmasq'
set adblock.global.adb_fetchutil='wget'
set adblock.global.adb_fetchinsecure='1'
set adblock.global.adb_dnsinstance='0'
set adblock.global.adb_eng_sources='bluGo/formats/domains.txt'
set adblock.global.adb_forcedns='1'
set adblock.global.adb_zonelist='lan'
set adblock.global.adb_stb_sources='alternates/fakenews/hosts'
set adblock.global.adb_safesearch='0'
delete adblock.global.adb_utc_sources
add_list adblock.global.adb_utc_sources='drogue'
add_list adblock.global.adb_utc_sources='adult'
add_list adblock.global.adb_utc_sources='associations_religieuses'
add_list adblock.global.adb_utc_sources='bitcoin'
add_list adblock.global.adb_utc_sources='phishing'
add_list adblock.global.adb_utc_sources='malware'
delete adblock.global.adb_sources
add_list adblock.global.adb_sources='adaway'
add_list adblock.global.adb_sources='adguard'
add_list adblock.global.adb_sources='andryou'
add_list adblock.global.adb_sources='anti_ad'
add_list adblock.global.adb_sources='anudeep'
add_list adblock.global.adb_sources='disconnect'
add_list adblock.global.adb_sources='energized'
add_list adblock.global.adb_sources='openphish'
add_list adblock.global.adb_sources='reg_es'
add_list adblock.global.adb_sources='spam404'
add_list adblock.global.adb_sources='stevenblack'
add_list adblock.global.adb_sources='stopforumspam'
add_list adblock.global.adb_sources='whocares'
add_list adblock.global.adb_sources='yoyo'
EOF
uci commit adblock
service adblock restart
service adblock enable

# refreshing the blocklists every 24 hours
echo "16 07 * * * /etc/init.d/adblock reload" >> /etc/crontabs/root
crontab /etc/crontabs/root

### -- END --

### Firewall DROP external connections
if [ $(uci get firewall.@zone[0].name) = 'wan' ]; then zona=0
elif [ $(uci get firewall.@zone[-1].name) = 'wan' ]; then zona=-1
elif [ $(uci get firewall.@zone[-2].name) = 'wan' ]; then zona=-2
fi

uci set firewall.@zone[$zona].input='DROP'
uci set firewall.@zone[$zona].forward='DROP'
uci commit firewall
service firewall restart
### -- END --

# Create file to stop: daemon.err miniupnpd[8591]: could not open lease file: /var/upnp.leases
miniupnpd=/var/upnp.leases
touch $miniupnpd

mkdir -p /etc/backup
[ -e "/etc/backup/installed_packages.txt" ] || /usr/lib/OpenWrtScripts/opkgscript.sh write /etc/backup/installed_packages.txt
[ -e "/etc/backup/backup.tar.gz" ] || /sbin/sysbackup -b /etc/backup/backup.tar.gz
exit 0
